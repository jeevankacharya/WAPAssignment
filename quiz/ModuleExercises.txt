https://addyosmani.com/resources/essentialjsdesignpatterns/book/

1. Determine what this Javascript code will print out (without running it):
x = 1;
var a = 5;
var b = 10;
var c = function(a, b, c) {
    document.write(x);
    document.write(a);
    var f = function(a, b, c) {
        b = a;
        document.write(b);
        b = c;
        var x = 5;
    }
        f(a,b,c);
        document.write(b);
        var x = 10;
 }
c(8,9,10);
document.write(b);
document.write(x); 


Ans : Output is 10,8,8,9,10,1 respectively.


2. Define Global Scope and Local Scope in Javascript.
Ans : Any variable declared outside the function belongs to global Scope and accessible from anywhere in code
and any variable decalred within  the function and is only accessible from that function and nested function
 belongs to local scope

3. Consider the following structure of Javascript code:
// Scope A
function XFunc () {
    // Scope B
function YFunc () {
    // Scope C
};
};
(a) Do statements in Scope A have access to variables defined in Scope B and C?
(b) Do statements in Scope B have access to variables defined in Scope A?
(c) Do statements in Scope B have access to variables defined in Scope C?
(d) Do statements in Scope C have access to variables defined in Scope A?
(e) Do statements in Scope C have access to variables defined in Scope B?

Ans : False,True,False,True,True



4. What will be printed by the following (answer without running it)?
var x = 9;
function myFunction() {
    return x * x;
    }
document.write(myFunction());
x = 5;
document.write(myFunction());

Ans : Output is 81 and 25;



5.
var foo = 1;
function bar() {
     if (!foo) {
        var foo = 10;
       }
      alert(foo);
     }
bar();
What will the alert print out? (Answer without running the code. Remember ‘hoisting’.)?

Ans:  Alert print 10;


6. Consider the following definition of an add( ) function to increment a counter variable:
var add = (function () {
    var counter = 0;
    return function () {
        return counter += 1;
        }
 })();
Modify the above module to define a count object with two methods: add( ) and reset( ). The count.add( ) method
adds one to the counter (as above). The count.reset( ) method sets the counter to 0.

Ans: 
var count = (function(){
    var counter = 0;
  
    function add(){
        return counter+=1;
    }

    function reset(){
        counter=0;
        return counter;
    }

    return{
        add:add,
        reset: reset
    }
})();

7. In the definition of add( ) shown in question 6, identify the "free" variable. In the context of a 
function closure,
what is a "free" variable?

Ans: Free Variable  is counter;


8. The add( ) function defined in question 6 always adds 1 to the counter each time it is called. Write a definition
of a function make_adder(inc), whose return value is an add function with increment value inc (instead of 1). Here
is an example of using this function:
add5 = make_adder(5);
add5( ); add5( ); add5( ); // final counter value is 15

add7 = make_adder(7);
add7( ); add7( ); add7( ); // final counter value is 21

Ans : 

var make_adder = function(value){
    var counter = 0;
  
  
    return function(){
         return counter = counter+value;
      }
};
add5 = make_adder(5);
add5( ); add5( ); add5( );

add7 = make_adder(7);
add7( ); add7( ); add7( );




9. Suppose you are given a file of Javascript code containing a list of many function and variable declarations. All of
these function and variable names will be added to the Global Javascript namespace. What simple modification to
the Javascript file can remove all the names from the Global namespace?

Ans: Using Closure Solution can remove all the names from the Global namespace.





10. Using the Revealing Module Pattern, write a Javascript definition of a Module that creates an Employee Object
with the following fields and methods:
Private Field: name
Private Field: age
Private Field: salary
Public Method: setAge(newAge)
Public Method: setSalary(newSalary)
Public Method: setName(newName)
Private Method: getAge( )
Private Method: getSalary( )
Private Method: getName( )
Public Method: increaseSalary(percentage) // uses private getSalary( )
Public Method: incrementAge( ) // uses private getAge( )


Ans : 
var Employee = (function(){
 var name,age,salary;

function getName(){
  return name;
}

function setName(newname){
  this.name = newname;
}

function getAge(){
  return age;
}

function setAge(newage){
  this.age = newage;
}

function getSalary(){
  return salary;
}

function setSalary(newSalary){
  this.salary = newSalary;
}

function increaseSakary(percentage){
  salary = salary+  percatage * salary/100;
  getSalary();
}


function increamentAge(){
  age= age+1;
  getAge();
}

})();